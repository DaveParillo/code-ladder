<!DOCTYPE GameML [
  <!ENTITY commonControls '
        Private frm As New Form With {.Name = "frm", .Text = "Hello!", .AutoSize = True}
  
        Private lblPrompt As New Label With {.Name = "lblPrompt", .Location = New System.Drawing.Point(25, 10), .AutoSize = True}
        Private WithEvents btnClose As New Button With {.Name = "btnClose", .Text = "Close", .AutoSize = True, 
                                                        .Location = New System.Drawing.Point(75, 225)}
        Private Sub CloseMe() Handles btnClose.Click
            frm.Close()
        End Sub'>

  <!ENTITY commonAdd 'frm.Controls.Add(btnClose)
             frm.Controls.Add(lblPrompt)'>

  <!ENTITY isFrmOpen '
        Public Function isFrmOpen() As Boolean 
            Dim retval As Boolean = False
            For Each f As Form In Application.OpenForms()
                If f.Name = "frm" Then retval = True
            Next
            Return retval
        End Function'>
]>



<GameML xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation="GameML.xsd"
  version="1">
  <game name="CodeLadder">
    <language>VisualBasic</language>
    <level>2</level>
    <start>1</start>   
  </game>
 
    <puzzle>
    <description>
      Ensure the AutoSize property of the lblPrompt Control is True
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/AutoSize</help>
    <code>
      <header>
        &commonControls;
        Private Sub Setup()
            &commonAdd;
            frm.Text = "AutoSize Example"
            lblPrompt.AutoSize = False
            lblPrompt.Size = New System.Drawing.Size(200,25)
            lblPrompt.Text = "If you have changed the 'AutoSize' property of this control " &amp; vbNewline &amp; _
                             "then you will be able to see far more text than if the " &amp; vbNewline &amp; _
                             "'AutoSize' property is set equal to 'False'."
        End Sub


        Public Function Puzzle() As Label
          Setup()
      </header>
      <body>
        lblPrompt
      </body>
      <footer>
        frm.Show()
        Return lblPrompt
        End Function
      </footer>
    </code>
    <results>
      <expected property="AutoSize" value="True" />
    </results>
  </puzzle>

  <puzzle>
    <description>
      Set the BorderStyle property of the lblPrompt Control to a single thin line.
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/BorderStyle</help>
    <code>
      <header>
        &commonControls;
        Private Sub Setup()
            &commonAdd;
            frm.Text = "BorderStyle Example"
            lblPrompt.Text = "If you have changed the 'BorderStyle' property of this control " &amp; vbNewline &amp; _
                             "then you should see a single thin black line " &amp; vbNewline &amp; _
                             "surrounding all of the label text."
        End Sub

        Public Function Puzzle() As Label
          Setup()
      </header>
      <body>
        'lblPrompt.BorderStyle = ?
      </body>
      <footer>
        frm.Show()
        Return lblPrompt
        End Function
      </footer>
    </code>
    <results>
      <expected property="BorderStyle" value="FixedSingle" />
    </results>
  </puzzle>

  <puzzle>
    <description>
      Create a function which sets the lblPrompt text alignment property set to the upper right hand corner of the control.
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/TextAlign</help>
    <code entryPoint="SetAlignment">
      <header>
        &commonControls;
        Private Sub Setup()
            &commonAdd;
            lblPrompt.AutoSize = False
            lblPrompt.Size = New System.Drawing.Size(250,150)
            frm.Text = "TextAlign Example"
            lblPrompt.BorderStyle = BorderStyle.FixedSingle
            lblPrompt.Text = "If you have changed the 'TextAlign' property of this control " &amp; vbNewline &amp; _
                             "then you should see the text aligned " &amp; vbNewline &amp; _
                             "in the upper-right hand corner of the box."
        End Sub

        Public Function SetAlignment() As Label
        Setup()
      </header>
      <body>
        ' TopLeft is the default
        
      </body>
      <footer>
            frm.Show()
            Return lblPrompt
        End Function
      </footer>
    </code>
    <results>
      <expected property="TextAlign" value="TopRight" />
    </results>
  </puzzle>

  <puzzle>
    <description>
      Fix this broken MessageBox function by changing as few characters as possible.
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/MessageBox</help>
    <code entryPoint="ShowMessage">
      <header>
        Public Function ShowMessage() As DialogResult
          Dim retVal As DialogResult
      </header>
      
      <body>
        ' Do not edit the variable
        ' retVal stores the action from the message box
        retVal = MassageBoxShow("Hello, World!)
        
      </body>
      
      <footer>
        Return retVal
      End Function
      </footer>
      
    </code>
    <results>
      <expected  value="OK" />
    </results>
  </puzzle>


  <puzzle>
    <description>
      Fix this broken MessageBox function and ensure you can press the 'Yes' button when done.
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/MessageBox</help>
    <code entryPoint="ShowYesNoMessage">
      <header>
        Public Function ShowYesNoMessage() As DialogResult
            Dim vbAnswer As DialogResult
      </header>

      <body>
        ' Do not edit the variable to the left of the =
        ' vbAnswer stores the action from the message box
        vbAnswer =  MessageBox.Show("Press the 'Yes' Button in this message box to finish.", _
                                    "A two button Message Box", _
                                    MessageBoxButtons, _
                                    MessageBoxIcon.Information) 

      </body>

      <footer>
            Return vbAnswer
        End Function
      </footer>

    </code>
    <results>
      <expected  value="Yes" />
    </results>
  </puzzle>

  
    <puzzle>
    <description>
      Change the 'btnClose' button text from 'Close' to 'Exit'.
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/Controls</help>
    <code>
      <header>
        &commonControls;

        Private Sub ShowResults()
          &commonAdd;
          frm.Show()
        End Sub

        Public Function Puzzle() As Button
      </header>
      <body>
      </body>
      <footer>
          ShowResults()
          Return btnClose
        End Function
      </footer>
    </code>
    <results>
      <expected property="Text" value="Exit" />
    </results>
  </puzzle>

  
    <puzzle>
    <description>
      Give the lblPrompt Control a border with a '3D' look.
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/BorderStyle</help>
    <code>
      <header>
        &commonControls;
        Private Sub Setup()
        &commonAdd;
        frm.Text = "BorderStyle Example"
        lblPrompt.Text = "If you have changed the 'BorderStyle' property of this control " &amp; vbNewline &amp; _
                         "then you should see a recessed-looking border " &amp; vbNewline &amp; _
                         "surrounding all of the label text."
        End Sub

        Public Function Puzzle() As Label
        Setup()
      </header>
      <body>
        
      </body>
      <footer>
        frm.Show()
        Return lblPrompt
        End Function
      </footer>
    </code>
    <results>
      <expected property="BorderStyle" value="Fixed3D" />
    </results>
  </puzzle>

  
  <puzzle>
    <description>
      Sets the lblPrompt text alignment property set to the center of the control lblPrompt in the provided click event handler.
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/TextAlign</help>
    <code entryPoint="SetAlignment">
      <header>
        &commonControls;
        Private WithEvents btnAlign As New Button With {.Name = "btnAlign", .Text = "Set Alignment", .AutoSize = True,
                                                        .Location = New System.Drawing.Point(150, 225)}
        Private Sub Setup()
            &commonAdd;
            frm.Controls.Add(btnAlign)
            lblPrompt.AutoSize = False
            lblPrompt.Size = New System.Drawing.Size(250,150)
            frm.Text = "TextAlign Example"
            lblPrompt.BorderStyle = BorderStyle.FixedSingle
            lblPrompt.Text = "If you have changed the 'TextAlign' property of this control " &amp; vbNewline &amp; _
                             "then you should see the text aligned " &amp; vbNewline &amp; _
                             "in the center of the box both horizontally and vertically."
        End Sub

        
      </header>
      <body>
        ' Button click event handler
        Private Sub btnAlign_Click(sender As Object, e As System.EventArgs) Handles btnAlign.Click
            
        End Sub
      </body>
      <footer>
        Public Function SetAlignment() As Label
            Setup()
            frm.ShowDialog()
            Return lblPrompt
        End Function
      </footer>
    </code>
    <results>
      <expected property="TextAlign" value="MiddleCenter" />
    </results>
  </puzzle>

  <puzzle>
    <description>
      Set a property of the 'lblNew' control so that it is visible when the program runs.
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/Visible</help>

    <code>
      <header>
        &commonControls;
        Private lblNew As New Label With {.Name = "lblNew", .Visible = False, .Location = New System.Drawing.Point(25, 45), .AutoSize = True}
        &isFrmOpen;
    
        Private Sub ShowResults()
          If Not isFrmOpen() Then
             &commonAdd;
             frm.Controls.Add(lblNew)
             frm.Show()
          End If
        End Sub

        Public Function Puzzle() As Label
          lblNew.Text = "If you can see this, then you're done."
          lblPrompt.Text = "If a control has its visible property set to 'False' " &amp; vbNewline _
                         &amp;  "you won't see it when your program runs."
      </header>
      <body>
          
      </body>
      <footer>
          ShowResults()
          Return lblNew
        End Function
      </footer>
    </code>
    <!--
    <code entryPoint="SetVisibility">
      <header>
        &commonControls;
        Private lblNew As New Label With {.Name = "lblNew", .Visible = False, .Location = New System.Drawing.Point(25, 45), .AutoSize = True}
        Private WithEvents btnVisible As New Button With {.Name = "btnVisible", .Text = "Set Visibility", .AutoSize = True,
                                                        .Location = New System.Drawing.Point(150, 225)}
        Private Sub Setup()
            &commonAdd;
            frm.Controls.Add(btnVisible)
            frm.Controls.Add(lblNew)
            frm.Text = "Visibility Example"
            lblNew.Text = "If you can see this, then you're done."
            lblPrompt.Text = "If you have changed the 'Visibility' property of this control " &amp; vbNewline &amp; _
                             "then you should see a new label below this prompt."
        End Sub

        
      </header>
      <body>
        ' Button click event handler
        Private Sub btnVisible_Click(sender As Object, e As System.EventArgs) Handles btnVisible.Click
            
        End Sub
      </body>
      <footer>
        Public Function SetVisibility() As Label
            Setup()
            frm.ShowDialog()
            MessageBox.Show(lblPrompt.Visible.ToString)
            Return lblNew
        End Function
      </footer>
    </code>
    
-->   
    <results>
      <expected property="Visible" value="True" />
    </results>
  </puzzle>
    
  <puzzle>
    <description>
      Fix this broken MessageBox function by changing as few characters as possible.
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/MessageBox</help>
    <code entryPoint="ShowMessage">
      <header>
        Public Function ShowMessage() As DialogResult
          Dim retVal As DialogResult
      </header>
      
      <body>
        ' Do not mess with anything on the left hand side of the =
        retVal = MessageBox("This is a message in a message box.)
        
      </body>
      
      <footer>
        Return retVal
      End Function
      </footer>
      
    </code>
    <results>
      <expected  value="OK" />
    </results>
  </puzzle>
  
  <puzzle>
    <description>
      Assign $34.99 to the control lblPrompt
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/Controls</help>
    <code>
      <header>
        &commonControls;

        Private Sub ShowResults()
            &commonAdd;
            frm.PerformLayout()
            frm.Show()
        End Sub

        Public Function Puzzle() As Label
      </header>
      <body>
        
      </body>
      <footer>
        ShowResults()
        Return lblPrompt
        End Function
      </footer>
    </code>
    <results>
      <expected property="Text" value="$34.99" />
    </results>
  </puzzle>


  <puzzle>
    <description>
      Set tag property of a control named 'lblState' to 'VA'.
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/Tag</help>
    <code>
      <header>
        Public Function Puzzle() As Label
           Dim lblState As New Label
      </header>
      <body>
        ' The Tag property is never visible to users - it's a property of many controls.
        ' This example will not create an example dialog window, since there is nothing to see.
        
      </body>
      <footer>
         Return lblState
         End Function
      </footer>
      
    </code>
    <results>
      <expected property="Tag" value="VA" />
    </results>
  </puzzle>

    <puzzle>
    <description>
      Sets the lblPrompt text alignment property set to the left center of the control lblPrompt in the provided click event handler.
    </description>
    <help>https://code.google.com/p/code-ladder/wiki/TextAlign</help>
    <code entryPoint="SetAlignment">
      <header>
        &commonControls;
        Private WithEvents btnAlign As New Button With {.Name = "btnAlign", .Text = "Set Alignment", .AutoSize = True,
                                                        .Location = New System.Drawing.Point(150, 225)}
        Private Sub Setup()
            &commonAdd;
            frm.Controls.Add(btnAlign)
            lblPrompt.AutoSize = False
            lblPrompt.Size = New System.Drawing.Size(250,150)
            frm.Text = "TextAlign Example"
            lblPrompt.BorderStyle = BorderStyle.FixedSingle
            lblPrompt.Text = "If you have changed the 'TextAlign' property of this control " &amp; vbNewline &amp; _
                             "then you should see the text aligned " &amp; vbNewline &amp; _
                             "in the center of the box vertically &amp; on the left side of the control."
        End Sub

        
      </header>
      <body>
        ' Button click event handler
        Private Sub btnAlign_Click(sender As Object, e As System.EventArgs) Handles btnAlign.Click
            
        End Sub
      </body>
      <footer>
        Public Function SetAlignment() As Label
            Setup()
            frm.ShowDialog()
            Return lblPrompt
        End Function
      </footer>
    </code>
    <results>
      <expected property="TextAlign" value="MiddleLeft" />
    </results>
  </puzzle>
</GameML>

