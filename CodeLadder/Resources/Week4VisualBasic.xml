<!DOCTYPE GameML [
  <!ENTITY commonControls '
        Private frm As New Form With {.Name = "frm", .Text = "Hello!", .AutoSize = True}
  
        Private lblPrompt As New Label With {.Name = "lblPrompt", .Location = New System.Drawing.Point(25, 10), .AutoSize = True}
        Private grpBox As New GroupBox With {.Name = "grpBox", .Text = "Options", .Location = New System.Drawing.Point(25, 45), .AutoSize = True}
        Private WithEvents btnClose As New Button With {.Name = "btnClose", .Text = "Close", .AutoSize = True, 
                                                        .Location = New System.Drawing.Point(75, 225)}
        Private Sub CloseMe() Handles btnClose.Click
            frm.Close()
        End Sub'>

  <!ENTITY commonAdd 'frm.Controls.Add(btnClose)
            frm.Controls.Add(grpBox)
            frm.Controls.Add(lblPrompt)'>

  <!ENTITY isFrmOpen '
        Public Function isFrmOpen() As Boolean 
            Dim retval As Boolean = False
            For Each f As Form In Application.OpenForms()
                If f.Name = "frm" Then retval = True
            Next
            Return retval
        End Function'>
]>
<GameML xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation="GameML.xsd"
  version="1">
  <game name="CodeLadder">
    <language>VisualBasic</language>
    <level>4</level>   
    <start>1</start>   
  </game>

  <!--
   VB Chapter 4
   -->
  <puzzle>
    <description>Create a function that returns "It's chilly" if intTemp is less than 50
    </description>
    <help>https://github.com/DaveParillo/code-ladder/wiki/IfThen</help>
    <code entryPoint="Example">
      <body>
        Public Function Example (ByVal intTemp As Integer) As String
          Dim strResult As String
          ' There are two possible outcomes in this function:
          '  1. The function returns the string "It's chily"
          '  2. The function returns an empty string

          If what?
              strResult = It's chilly
          End If

          Return strResult
        End Function
      </body>
    </code>
    <results>
      <expected value="It's chilly" type="String">
        <parameter value="49" type="Integer" />
      </expected>
      <expected value="" type="String">
        <parameter value="50" type="Integer" />
      </expected>
    </results>
  </puzzle>

  <puzzle>
    <description>
      Create a function that returns "It's cold, no?" if intTemp is less than 52 
      and "Nice weather we're having!" otherwise.
    </description>
    <help>https://github.com/DaveParillo/code-ladder/wiki/IfThenElse</help>
    <code entryPoint="Example">
      <body>
        Public Function Example (ByVal intTemp As Integer) As String
          Dim strResult As String
          ' There are two possible outcomes in this function:
          '  1. The function returns the string "It's cold"
          '  2. The function returns the string "Nice weather ..."

          If what?
              strResult = "It's cold, no?"
              strResult = "Nice weather we're having!"
          End If

          Return strResult
        End Function
      </body>
    </code>
    <results>
      <expected value="It's cold, no?" type="String">
        <parameter value="51" type="Integer" />
      </expected>
      <expected value="It's cold, no?" type="String">
        <parameter value="-5" type="Integer" />
      </expected>
      <expected value="Nice weather we're having!" type="String">
        <parameter value="52" type="Integer" />
      </expected>
      <expected value="Nice weather we're having!" type="String">
        <parameter value="89" type="Integer" />
      </expected>
    </results>
  </puzzle>

  

  <puzzle>
    <description>Create a function that returns letter grades: A (90+), B(80+), C, D, F, given a numeric GPA upto and including 100 and "Not a valid grade." otherwise.</description>
    <help>https://github.com/DaveParillo/code-ladder/wiki/IfThenElse</help>
    <code entryPoint="Example">
      <body>
        Public Function Example (ByVal GPA As Single) As String

        End Function
      </body>
      
    </code>
    <results>
      <expected value="A" type="String">
        <parameter value="100" type="Single" />
      </expected>
      <expected value="A" type="String">
        <parameter value="90" type="Single" />
      </expected>
      <expected value="B" type="String">
        <parameter value="89.9" type="Single" />
      </expected>
      <expected value="B" type="String">
        <parameter value="80" type="Single" />
      </expected>
      <expected value="C" type="String">
        <parameter value="79.9" type="Single" />
      </expected>
      <expected value="C" type="String">
        <parameter value="70" type="Single" />
      </expected>
      <expected value="D" type="String">
        <parameter value="69.9" type="Single" />
      </expected>
      <expected value="D" type="String">
        <parameter value="60" type="Single" />
      </expected>
      <expected value="F" type="String">
        <parameter value="59.9" type="Single" />
      </expected>
      <expected value="F" type="String">
        <parameter value="50" type="Single" />
      </expected>
      <expected value="Not a valid grade." type="String">
        <parameter value="101" type="Single" />
      </expected>
    </results>
  </puzzle>

    <puzzle>
    <description>
      Create a function that computes gross pay given hours worked and pay rate.  Display numeric 
      results in curreny format.  Ensure your code includes input validation.
    </description>
    <help>https://github.com/DaveParillo/code-ladder/wiki/TryParse</help>
    <code entryPoint="Example">
      <body>
        Public Function Example (ByVal HoursWorked As String, ByVal PayRate As String) As String
          Dim intHours As Integer
          Dim decPayRate As Decimal
          Dim decGrossPay As Decimal
          Dim strResult As String

          ' Get the hours worked
          If Integer.TryParse (HoursWorked, intHours) Then
              ' If true then we know intHours has a value and we can proceed

              If Decimal.TryParse() Then
                  ' If true then decPayRate has a value &amp; too

                  ' Calulate gross pay

              Else
                  ' Pay rate is not a number.
              End If
          Else
              ' Hours worked is not a number.
          End If

          Return
        End Function
      </body>
      
    </code>
    <results>
      <expected value="$150.00" type="String">
        <parameter value="10" type="String" />
        <parameter value="15" type="String" />
      </expected>
      <expected value="$0.00" type="String">
        <parameter value="0" type="String" />
        <parameter value="15.5" type="String" />
      </expected>
      <expected value="Hours worked is not a number." type="String">
        <parameter value="foo" type="String" />
        <parameter value="75.5" type="String" />
      </expected>
      <expected value="Pay rate is not a number." type="String">
        <parameter value="40" type="String" />
        <parameter value="bar" type="String" />
      </expected>
    </results>
  </puzzle>


  <puzzle>
    <description>Create a function that returns True if Savings are greater than or equal to Goal</description>
    <help>https://github.com/DaveParillo/code-ladder/wiki/IfThen</help>
    <code>
      <body>
        Public Function Puzzle(ByVal Savings As Decimal, ByVal Goal As Decimal) As Boolean
        End Function
      </body>
      
    </code>
    <results>
      <expected value="False" type="Boolean">
        <parameter value="35000" type="Decimal" />
        <parameter value="50000" type="Decimal" />
      </expected>
      <expected value="True" type="Boolean">
        <parameter value="154000" type="Decimal" />
        <parameter value="99000" type="Decimal" />
      </expected>
      <expected value="True" type="Boolean">
        <parameter value="178950.50" type="Decimal" />
        <parameter value="178950.50" type="Decimal" />
      </expected>
    </results>
  </puzzle>

  <puzzle>
    <description>
      Create a function using TryParse that returns "X is a number." if X is a number 
      and "X is not a number." otherwise.  Use the value of 'X' in your return value.
    </description>
    <help>https://github.com/DaveParillo/code-ladder/wiki/TryParse</help>
    <code>
      <body>
        Public Function Puzzle(ByVal X As String) As String
        End Function
      </body>
      
    </code>
    <results>
      <expected value="39 is a number." type="String">
        <parameter value="39" type="String" />
      </expected>
      <expected value="$14.92 is not a number." type="String">
        <parameter value="$14.92" type="String" />
      </expected>
      <expected value="foo42 is not a number." type="String">
        <parameter value="foo42" type="String" />
      </expected>
    </results>
  </puzzle>

  <puzzle>
    <description>
      Create a function that compares two numeric strings and determines which is larger.  Ensure your 
      code includes input validation.
    </description>
    <help>https://github.com/DaveParillo/code-ladder/wiki/TryParse</help>
    <code>
      <body>
        ' Return one of the following 5 strings:
        ' * "A is larger than B."
        ' * "B is larger than A."
        ' * "A and B are the same."
        ' * "A is not a number."
        ' * "B is not a number."
        Public Function Puzzle(ByVal A As String, ByVal B as String) As String
        End Function
      </body>
    </code>
    <results>
      <expected value="A is larger than B." type="String">
        <parameter value="39" type="String" />
        <parameter value="-3" type="String" />
      </expected>
      <expected value="B is larger than A." type="String">
        <parameter value="14.92" type="String" />
        <parameter value="99.54" type="String" />
      </expected>
      <expected value="B is larger than A." type="String">
        <parameter value="9" type="String" />
        <parameter value="78.90" type="String" />
      </expected>
      <expected value="A and B are the same." type="String">
        <parameter value="3.14159" type="String" />
        <parameter value="3.14159" type="String" />
      </expected>
      <expected value="A is not a number." type="String">
        <parameter value="foo" type="String" />
        <parameter value="2.71828" type="String" />
      </expected>
      <expected value="B is not a number." type="String">
        <parameter value="2.71828" type="String" />
        <parameter value="bar" type="String" />
      </expected>
    </results>
  </puzzle>
  
  <puzzle>
    <description>
      Evaluate the check boxes and compute appropriate fees.
      
        Store the results in the 'lblFees' Label control with currency format applied.  
      
        Use the constants where appropriate.
    </description>
    <help>https://github.com/DaveParillo/code-ladder/wiki/CheckBox</help>
    <code>
      <header>
        &commonControls;
        Private WithEvents chkYoga As New CheckBox With {.Name = "chkYoga", .Text = "Yoga", .Location = New System.Drawing.Point(10, 20), .AutoSize = True}
        Private WithEvents chkKarate As New CheckBox With {.Name = "chkKarate", .Text = "Karate", .Location = New System.Drawing.Point(10, 40), .AutoSize = True}
        Private lblFees As New Label With {.Name = "lblFees", .Text = "lblFees", .Location = New System.Drawing.Point(100, 10), .AutoSize = True}
        Private lblYoga As New Label With {.Name = "lblYoga", .Visible = False, .Location = New System.Drawing.Point(25, 175), .AutoSize = True}
        Private lblKarate As New Label With {.Name = "lblKarate", .Visible = False, .Location = New System.Drawing.Point(25, 200), .AutoSize = True}
        Const FEE_YOGA As Decimal = 50d
        Const FEE_KARATE As Decimal = 75d
        Const FEE_MSG As String = " should be part of the total fees."

        Private Sub UpdateLabels () Handles chkYoga.CheckedChanged, chkKarate.CheckedChanged
            lblYoga.Visible = chkYoga.Checked
            lblKarate.Visible = chkKarate.Checked
            CalculateFees()
        End Sub

        Public Function Puzzle(ByVal checked As Integer) As Label
            lblPrompt.Text = "Total Fees:"
            frm.Text = "CheckBox Example"
            chkYoga.Checked = False
            chkKarate.Checked = False
            Select Case checked
              Case 1
                  chkYoga.Checked = True
                  chkKarate.Checked = False
              Case 2
                  chkYoga.Checked = False
                  chkKarate.Checked = True
              Case 3
                  chkYoga.Checked = True
                  chkKarate.Checked = True
            End Select
            
            CalculateFees()
            If Not isFrmOpen() Then
                ShowResults()
            End If
            Return lblFees
        End Function  
        
        &isFrmOpen;
        
        Private Sub CalculateFees()
        
      </header>
      <body>
        ' Computes some health club style fees based on 2 check box selections.
        '
        ' The fees associated with the Yoga and Karate programs are defined as follows:
        '     Const FEE_YOGA As Decimal = 50d
        '     Const FEE_KARATE As Decimal = 75d
        ' The yoga check box is 'chkYoga'
        ' The karate check box is 'chkKarate' 
        ' Store the result in 'lblFees'
        
      </body>
      <footer>
        
        End Sub 
        Private Sub ShowResults()
            &commonAdd;
            btnClose.Location = New System.Drawing.Point (75,150)
            lblYoga.Text = FEE_YOGA.ToString("C") &amp; FEE_MSG
            lblKarate.Text = FEE_KARATE.ToString("C") &amp; FEE_MSG
            frm.Controls.Add(lblFees)
            frm.Controls.Add(lblYoga)
            frm.Controls.Add(lblKarate)
            grpBox.Controls.Add(chkYoga)
            grpBox.Controls.Add(chkKarate)
            frm.Show()
        End Sub
        
      </footer>
    </code>
    <results>
      <expected property="Text" value="$0.00" >
        <parameter value="0" type="Integer" />
      </expected>
      <expected property="Text" value="$50.00">
        <parameter value="1" type="Integer" />
      </expected>
      <expected property="Text" value="$75.00">
        <parameter value="2" type="Integer" />
      </expected>
      <expected property="Text" value="$125.00">
        <parameter value="3" type="Integer" />
      </expected>
    </results>
  </puzzle>  
  

  <puzzle>
    <description>Create a function that returns the length of a string</description>
    <help>https://github.com/DaveParillo/code-ladder/wiki/StringLength</help>
    <code entryPoint="GetLength">
      <body>
        ' Return the length of the string 'theText'
        Public Function GetLength (ByVal theText As String) As Integer
        End Function
      </body>
      
    </code>
    <results>
      <expected value="16" type="Integer">
        <parameter value="Fat ed is not up" type="String" />
      </expected>
      <expected value="44" type="Integer">
        <parameter value="The rain in spain falls mainly on the plain." type="String" />
      </expected>
      <expected value="2" type="Integer">
        <parameter value="hi" type="String" />
      </expected>
    </results>
  </puzzle>

  <puzzle>
    <description>
      Create a function that replaces the occurences of a character in a string 
      with the character 'b' and returns the result.
    </description>
    <help>https://github.com/DaveParillo/code-ladder/wiki/StringReplace</help>
    <code entryPoint="ReplaceCharWithEmpty">
      <body>
        ' Replace each occurrence of the character 'Ch' in the string 'Phrase' 
        ' with an empty string and return the result.
        Public Function ReplaceCharWithEmpty (ByVal Phrase As String, ByVal Ch As Char) As String
        End Function
      </body>
      
    </code>
    <results>
      <expected value="Peter Piber bicked a beck of Pickled Pebbers" type="String">
        <parameter value="Peter Piper picked a peck of Pickled Peppers" type="String" />
        <parameter value="p" type="Char" />
      </expected>
      <expected value="The raib ib spaib falls maibly ob the plaib" type="String">
        <parameter value="The rain in spain falls mainly on the plain" type="String" />
        <parameter value="n" type="Char" />
      </expected>
      <expected value="The quick brbwn fbx jumped bver the lazy dbgs" type="String">
        <parameter value="The quick brown fox jumped over the lazy dogs" type="String" />
        <parameter value="o" type="Char" />
      </expected>
    </results>
  </puzzle>
  
  <puzzle>
    <description>Create a function that counts the occurences of a character in a string</description>
    <help>https://github.com/DaveParillo/code-ladder/wiki/StringReplace</help>
    <code entryPoint="CountChars">
      <body>
        ' Count each occurrence of the character 'Ch' in the string 'Phrase'
        ' and return the result.
        Public Function CountChars (ByVal Phrase As String, ByVal Ch as Char) As Integer
        End Function
      </body>
    </code>
    <results>
      <expected value="1" type="Integer">
        <parameter value="Fat Ed is not up" type="String" />
        <parameter value="d" type="Char" />
      </expected>
      <expected value="6" type="Integer">
        <parameter value="The rain in spain falls mainly on the plain" type="String" />
        <parameter value="n" type="Char" />
      </expected>
      <expected value="4" type="Integer">
        <parameter value="The quick brown fox jumped over the lazy dogs" type="String" />
        <parameter value="o" type="Char" />
      </expected>
    </results>
  </puzzle>

</GameML>
