<GameML xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation="GameML.xsd"
  version="1">
  <game name="CodeLadder">
    <language>VisualBasic</language>
    <level>1</level>   
    <start>1</start>   
  </game>

   <!--
   VB Chapter 1
   -->
  <puzzle level="1">
    <description>Fix the variable declaration in this broken function.</description>
    <code>
      Public Function Puzzle() As Integer
        Dim *intStrange As Integer = 3
        Return *intStrange
      End Function
    </code>
    <results>
      <expected value="3" />
    </results>
  </puzzle>

  <puzzle level="1">
    <description>Fix the control declaration in this broken function.</description>
    <code>
      Public Function Puzzle() As Button
        Dim Button 1 As New Button
        Return Button 1
      End Function
    </code>
    <results>
      <expected property="Name" value="" />
    </results>
  </puzzle>

  <puzzle level="1">
    <description>Fix the control declaration in this broken function.</description>
    <code>
      Public Function Puzzle() As Label
        Dim 1Label As New Label
        Return Label
      End Function
    </code>
    <results>
      <expected property="Name" value="" />
    </results>
  </puzzle>

  <puzzle level="1">
    <description>Fix the control declaration in this broken function.</description>
    <code>
      Public Function Puzzle() As TextBox
        Dim txtName/Address As New TextBox
        Return txtName/Address
      End Function
    </code>
    <results>
      <expected property="Name" value="" />
    </results>
  </puzzle>

  <puzzle level="1">
    <description>Create a function which returns the text 'Hello, World!'</description>
    <code entryPoint="HelloWorld">
      Public Function HelloWorld() As String
      End Function
    </code>
    <results>
      <expected value="Hello, World!" />
    </results>
  </puzzle>

  <puzzle level="2">
    <description>Set the property which prevents a label control from resizing to its contents.</description>
    <code>
      Public Function Puzzle() As Control
        Dim lblDirections As New Label
        Return lblDirections
      End Function
    </code>
    <results>
      <expected property="AutoSize" value="False" />
    </results>
  </puzzle>

  <!--
   VB Chapter 2
   -->
  <puzzle level="2">
    <description>Create a function which returns a TextBox with it's text property set to a mystery value.</description>
    <code>
      Public Function Puzzle() As TextBox
        Dim txtSample As New TextBox
      End Function
    </code>
    <results>
      <expected property="Text" value="Canada" />
    </results>
  </puzzle>

  <puzzle level="2">
    <description>Create a function which returns a Label with it's tag property set to a mystery value.</description>
    <code>
      Public Function Puzzle() As Label
      Dim lblVirginia As New Label
      End Function
    </code>
    <results>
      <expected property="Tag" value="VA" />
    </results>
  </puzzle>

  <puzzle level="2">
    <description>Create a function which returns a TextBox with it's visible property set to a mystery value.</description>
    <code>
      Public Function Puzzle() As TextBox
      End Function
    </code>
    <results>
      <expected property="Visible" value="False" />
    </results>
  </puzzle>

  <puzzle level="2">
    <description>Create a function which returns a Label with it's text property set to a mystery value.</description>
    <code>
      Public Function Puzzle() As Label
      End Function
    </code>
    <results>
      <expected property="Text" value="Will the fun never end?" />
    </results>
  </puzzle>

  <puzzle level="2">
    <description>Create a function which returns a Label with it's text alignment property set to a mystery value.</description>
    <code>
      Public Function Puzzle() As Label
      End Function
    </code>
    <results>
      <expected property="TextAlign" value="TopCenter" />
    </results>
  </puzzle>
  <puzzle level="2">
    <description>Fix this broken function</description>
    <code>
      Public Function Puzzle() As Integer
        Dim intRetVal As Integer
        intRetVal =  MessagBox("Hello, World!")
        Return intRetVal
      End Function
    </code>
    <results>
      <expected  value="1" />
    </results>
  </puzzle>
  
  <puzzle level="2">
    <description>Create a function which returns a Label with it's text alignment property set to a mystery value.</description>
    <code>
      Public Function Puzzle() As Label
      End Function
    </code>
    <results>
      <expected property="TextAlign" value="MiddleRight" />
    </results>
  </puzzle>

  <puzzle level="2">
    <description>Fix this broken function</description>
    <code>
      Public Function Puzzle() As Integer
        Dim intReturnValue As Integer
        intReturnValue =  MessageBoxShow("Hello, World!)
        Return intReturnValue
      End Function
    </code>
    <results>
      <expected value="1" />
    </results>
  </puzzle>
  <!--
   VB Chapter 3
   -->
  <puzzle level="3">
    <description>This function should return the name plus a mystery String</description>
    <code entryPoint="HelloWorld">
      Public Function HelloWorld(ByVal HelloName As String) As String
      End Function
    </code>
    <results>
      <expected value="Hello, Bob!">
        <parameter value="Bob" type="String" />
      </expected>
      <expected value="Hello, Everyone!">
        <parameter value="Everyone" type="String" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>This function should return the name plus a mystery String</description>
    <code entryPoint="btn_ShowGreeting_Click">
      Public Function btn_ShowGreeting_Click(ByVal HelloName As String) As String
      End Function
    </code>
    <results>
      <expected value="Hello Becky.">
        <parameter value="Becky" type="String" />
      </expected>
      <expected value="Hello Charlie.">
        <parameter value="Charlie" type="String" />
      </expected>
      <expected value="Hello Everyone.">
        <parameter value="Everyone" type="String" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>This function should concatenate its arguments to show a date string</description>
    <code entryPoint="btn_ShowDate_Click">
      Public Function btn_ShowDate_Click(ByVal DayOfWeek As String, ByVal Month As String, ByVal Day As String, ByVal Year As String) As String
      End Function
    </code>
    <results>
      <expected value="December 3, 2010 was a Friday." >
        <parameter value="Friday" type="String" />
        <parameter value="December" type="String" />
        <parameter value="3" type="String" />
        <parameter value="2010" type="String" />
      </expected>
      <expected value="January 1, 1970 was a Thursday." >
        <parameter value="Thursday" type="String" />
        <parameter value="January" type="String" />
        <parameter value="1" type="String" />
        <parameter value="1970" type="String" />
      </expected>
      <expected value="December 10, 1815 was a Sunday." >
        <parameter value="Sunday" type="String" />
        <parameter value="December" type="String" />
        <parameter value="10" type="String" />
        <parameter value="1815" type="String" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>This function should return a button, Show Date, with a keyboard shortcut defined</description>
    <code entryPoint="MakeShortcut">
      Public Function MakeShortcut() As Button
      End Function
    </code>
    <results>
      <expected property="Text" value="Show &amp;Date" />
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Fix this broken function</description>
    <code entryPoint="GetTwentyFive">
      Public Function GetTwentyFive() As Integer
      Dim intValue As Integer = -1
      Dim intValue As Integer = 25
      Return intValue
      End Function
    </code>
    <results>
      <expected value="25"  type="Integer"/>
    </results>
  </puzzle>
  
  <puzzle level="3">
    <description>Create a function that negates a provided value</description>
    <code>
      Public Function Puzzle(ByVal intValue As Integer) As Integer
      End Function
    </code>
    <results>
      <expected value="-1" type="Integer">
        <parameter value="1" type="Integer" />
      </expected>
      <expected value="3" type="Integer">
        <parameter value="-3" type="Integer" />
      </expected>
      <expected value="-17" type="Integer">
        <parameter value="17" type="Integer" />
      </expected>
      <expected value="65656" type="Integer">
        <parameter value="-65656" type="Integer" />
      </expected>
      <expected value="8192" type="Integer">
        <parameter value="-8192" type="Integer" />
      </expected>
    </results>
  </puzzle>
  
  <puzzle level="3">
    <description>Create a function that returns the sum of two values</description>
    <code>
      Public Function Puzzle(ByVal X As Integer, ByVal Y As Integer) As Integer
      End Function
    </code>
    <results>
      <expected value="0" type="Integer">
        <parameter value="1" type="Integer" />
        <parameter value="-1" type="Integer" />
      </expected>
      <expected value="40" type="Integer">
        <parameter value="17" type="Integer" />
        <parameter value="23" type="Integer" />
      </expected>
      <expected value="6" type="Integer">
        <parameter value="-17" type="Integer" />
        <parameter value="23" type="Integer" />
      </expected>
      <expected value="-5" type="Integer">
        <parameter value="-3" type="Integer" />
        <parameter value="-2" type="Integer" />
      </expected>
      <expected value="131312" type="Integer">
        <parameter value="65656" type="Integer" />
        <parameter value="65656" type="Integer" />
      </expected>
      <expected value="1040384" type="Integer">
        <parameter value="1048576" type="Integer" />
        <parameter value="-8192" type="Integer" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Create a function that returns the product of two values</description>
    <code>
      Public Function Puzzle(ByVal X As Integer, ByVal Y As Integer) As Long
      End Function
    </code>
    <results>
      <expected value="-1" type="Long">
        <parameter value="1" type="Integer" />
        <parameter value="-1" type="Integer" />
      </expected>
      <expected value="391" type="Long">
        <parameter value="17" type="Integer" />
        <parameter value="23" type="Integer" />
      </expected>
      <expected value="-391" type="Long">
        <parameter value="-17" type="Integer" />
        <parameter value="23" type="Integer" />
      </expected>
      <expected value="6" type="Long">
        <parameter value="-3" type="Integer" />
        <parameter value="-2" type="Integer" />
      </expected>
      <expected value="277422336" type="Long">
        <parameter value="16656" type="Integer" />
        <parameter value="16656" type="Integer" />
      </expected>
      <expected value="-8388608" type="Long">
        <parameter value="1024" type="Integer" />
        <parameter value="-8192" type="Integer" />
      </expected>
      
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Create a function that returns the quotient of two values</description>
    <code>
      Public Function Puzzle(ByVal X As Integer, ByVal Y As Integer) As Double
      End Function
    </code>
    <results>
      <expected value="-1" type="Double">
        <parameter value="1" type="Integer" />
        <parameter value="-1" type="Integer" />
      </expected>
      <expected value="60" type="Double">
        <parameter value="3600" type="Integer" />
        <parameter value="60" type="Integer" />
      </expected>
      <expected value="2.5" type="Double">
        <parameter value="25" type="Integer" />
        <parameter value="10" type="Integer" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Create a function that returns the remainder of a division operation</description>
    <code>
      Public Function Puzzle(ByVal X As Integer, ByVal Y As Integer) As Integer
      End Function
    </code>
    <results>
      <expected value="0" type="Integer">
        <parameter value="1" type="Integer" />
        <parameter value="-1" type="Integer" />
      </expected>
      <expected value="10" type="Integer">
        <parameter value="3610" type="Integer" />
        <parameter value="60" type="Integer" />
      </expected>
      <expected value="60" type="Integer">
        <parameter value="60" type="Integer" />
        <parameter value="3600" type="Integer" />
      </expected>
      <expected value="4" type="Integer">
        <parameter value="667612" type="Integer" />
        <parameter value="-12" type="Integer" />
      </expected>
      <expected value="54"  type="Integer">
        <parameter value="174" type="Integer" />
        <parameter value="60" type="Integer" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Create a function that returns the quotient of an integer division operation</description>
    <code>
      Public Function Puzzle(ByVal X As Integer, ByVal Y As Integer) As Integer
      End Function
    </code>
    <results>
      <expected value="2" type="Integer">
        <parameter value="174" type="Integer" />
        <parameter value="60" type="Integer" />
      </expected>
      <expected value="15"  type="Integer">
        <parameter value="900" type="Integer" />
        <parameter value="60" type="Integer" />
      </expected>
      <expected value="42"  type="Integer">
        <parameter value="900" type="Integer" />
        <parameter value="21" type="Integer" />
      </expected>
      <expected value="-5"  type="Integer">
        <parameter value="-42" type="Integer" />
        <parameter value="8" type="Integer" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Create a function that returns the results of exponentiation operations</description>
    <code>
      Public Function Puzzle(ByVal Base As Integer, ByVal Exponent As Integer) As Double
      End Function
    </code>
    <results>
      <expected value="8" type="Double">
        <parameter value="2" type="Integer" />
        <parameter value="3" type="Integer" />
      </expected>
      <expected value="1024" type="Double">
        <parameter value="2" type="Integer" />
        <parameter value="10" type="Integer" />
      </expected>
      <expected value="256" type="Double">
        <parameter value="-4" type="Integer" />
        <parameter value="4" type="Integer" />
      </expected>
      <expected value="-64" type="Double">
        <parameter value="-4" type="Integer" />
        <parameter value="3" type="Integer" />
      </expected>
      <expected value="1" type="Double">
        <parameter value="3" type="Integer" />
        <parameter value="0" type="Integer" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Create a function that first adds 'x' and 'base', then raises the sum to an exponent and returns the results</description>
    <code>
      Public Function Puzzle(ByVal X As Integer, ByVal Base As Integer, ByVal Exponent As Integer) As Double
      End Function
    </code>
    <results>
      <expected value="27" type="Double">
        <parameter value="1" type="Integer" />
        <parameter value="2" type="Integer" />
        <parameter value="3" type="Integer" />
      </expected>
      <expected value="-8" type="Double">
        <parameter value="4" type="Integer" />
        <parameter value="-6" type="Integer" />
        <parameter value="3" type="Integer" />
      </expected>
      <expected value="1024" type="Double">
        <parameter value="16" type="Integer" />
        <parameter value="16" type="Integer" />
        <parameter value="2" type="Integer" />
      </expected>
      <expected value="1024" type="Double">
        <parameter value="-10" type="Integer" />
        <parameter value="8" type="Integer" />
        <parameter value="10" type="Integer" />
      </expected>
      <expected value="-1024" type="Double">
        <parameter value="-10" type="Integer" />
        <parameter value="6" type="Integer" />
        <parameter value="5" type="Integer" />
      </expected>
    </results>
  </puzzle>
  
  <puzzle level="3">
    <description>Create a function that converts a string to a number and returns the results</description>
    <code>
      Public Function Puzzle(ByVal X As String) As Integer
      End Function
    </code>
    <results>
      <expected value="2" type="Integer">
        <parameter value="2" type="String" />
      </expected>
      <expected value="-42" type="Integer">
        <parameter value="-42.0" type="String" />
      </expected>
      <expected value="1776" type="Integer">
        <parameter value="$1,776" type="String" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Create a function that converts a string to a number and returns the results</description>
    <code>
      Public Function Puzzle(ByVal X As String) As Decimal
      End Function
    </code>
    <results>
      <expected value="2.123456" type="Decimal">
        <parameter value="2.123456" type="String" />
      </expected>
      <expected value="-42" type="Decimal">
        <parameter value="-42.0" type="String" />
      </expected>
      <expected value="1812" type="Decimal">
        <parameter value="$1,812" type="String" />
      </expected>
    </results>
  </puzzle>
  
  <puzzle level="3">
    <description>Create a function that converts a number to a string and returns the results</description>
    <code>
      Public Function Puzzle(ByVal X As Integer) As String
      End Function
    </code>
    <results>
      <expected value="2" type="String">
        <parameter value="2" type="Integer" />
      </expected>
      <expected value="-11" type="String">
        <parameter value="-11" type="Integer" />
      </expected>
      <expected value="1776" type="String">
        <parameter value="1776" type="Integer" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Create a function that converts a number to a string and returns the results</description>
    <code>
      Public Function Puzzle(ByVal X As Integer) As String
      End Function
    </code>
    <results>
      <expected value="002" type="String">
        <parameter value="2" type="Integer" />
      </expected>
      <expected value="-011" type="String">
        <parameter value="-11" type="Integer" />
      </expected>
      <expected value="1776" type="String">
        <parameter value="1776" type="Integer" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Create a function that converts a number to a string and returns the results</description>
    <code>
      Public Function Puzzle(ByVal X As Decimal) As String
      End Function
    </code>
    <results>
      <expected value="$2,345.67" type="String">
        <parameter value="2345.67" type="Decimal" />
      </expected>
      <expected value="($6,543.20)" type="String">
        <parameter value="-6543.2" type="Decimal" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Create a function that converts a number to a string and returns the results</description>
    <code>
      Public Function Puzzle(ByVal X As Decimal) As String
      End Function
    </code>
    <results>
      <expected value="23.40 %" type="String">
        <parameter value=".234" type="Decimal" />
      </expected>
      <expected value="-65.43 %" type="String">
        <parameter value="-.6543" type="Decimal" />
      </expected>
      <expected value="177,600.00 %" type="String">
        <parameter value="1776" type="Decimal" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Create a function that converts a number to a string and returns the results</description>
    <code>
      Public Function Puzzle(ByVal X As Double) As String
      End Function
    </code>
    <results>
      <expected value="2.340e-001" type="String">
        <parameter value="0.234" type="Double" />
      </expected>
      <expected value="1.235e+005" type="String">
        <parameter value="123456" type="Double" />
      </expected>
    </results>
  </puzzle>
  <puzzle level="3">
    <description>Create a function that converts a number to a string and returns the results</description>
    <code>
      Public Function Puzzle(ByVal X As Date) As String
      End Function
    </code>
    <results>
      <expected value="Friday, December 03, 2010" type="String">
        <parameter value="#12/3/2010#" type="Date" />
      </expected>
      <expected value="Thursday, July 04, 1776" type="String">
        <parameter value="#7/4/1776#" type="Date" />
      </expected>
      <expected value="Sunday, December 10, 1815" type="String">
        <parameter value="#12/10/1815#" type="Date" />
      </expected>  
    </results>
  </puzzle>

  <puzzle level="3">
    <description>Create a function which returns a Label with it's forground color property set to a red.</description>
    <code>
      Public Function Puzzle() As Label
      End Function
    </code>
    <results>
      <expected property="ForeColor" value="Color [Red]" />
    </results>
  </puzzle>  
  
  <!--
  
  Adding some questions related to exception handling might be a bonus...
  
  
  -->

  <!--
   VB Chapter 4
   -->
  <puzzle level="4">
    <description>Create a function that returns "It's cold" if intTemp is less than 40</description>
    <code>
      Public Function Puzzle(ByVal intTemp As Integer) As String
      End Function
    </code>
    <results>
      <expected value="It's cold" type="String">
        <parameter value="39" type="Integer" />
      </expected>
      <expected value="" type="String">
        <parameter value="40" type="Integer" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="4">
    <description>Create a function that returns True if Savings are greater than or equal to Goal</description>
    <code>
      Public Function Puzzle(ByVal Savings As Decimal, ByVal Goal As Decimal) As Boolean
      End Function
    </code>
    <results>
      <expected value="False" type="Boolean">
        <parameter value="35000" type="Decimal" />
        <parameter value="50000" type="Decimal" />
      </expected>
      <expected value="True" type="Boolean">
        <parameter value="154000" type="Decimal" />
        <parameter value="99000" type="Decimal" />
      </expected>
      <expected value="True" type="Boolean">
        <parameter value="178950.50" type="Decimal" />
        <parameter value="178950.50" type="Decimal" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="4">
    <description>Create a function that returns "It's cold" if intTemp is less than or equal to 40 and "Nice weather" otherwise</description>
    <code>
      Public Function Puzzle(ByVal intTemp As Integer) As String
      End Function
    </code>
    <results>
      <expected value="It's cold" type="String">
        <parameter value="39" type="Integer" />
      </expected>
      <expected value="It's cold" type="String">
        <parameter value="40" type="Integer" />
      </expected>
      <expected value="Nice weather" type="String">
        <parameter value="72" type="Integer" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="4">
    <description>Create a function that returns letter grades: A (90+), B(80+), C, D, F, given a numeric GPA</description>
    <code>
      Public Function Puzzle(ByVal GPA As Single) As String
      End Function
    </code>
    <results>
      <expected value="A" type="String">
        <parameter value="97" type="Single" />
      </expected>
      <expected value="A" type="String">
        <parameter value="90" type="Single" />
      </expected>
      <expected value="B" type="String">
        <parameter value="89.9" type="Single" />
      </expected>
      <expected value="B" type="String">
        <parameter value="80" type="Single" />
      </expected>
      <expected value="C" type="String">
        <parameter value="79.9" type="Single" />
      </expected>
      <expected value="C" type="String">
        <parameter value="70" type="Single" />
      </expected>
      <expected value="D" type="String">
        <parameter value="69.9" type="Single" />
      </expected>
      <expected value="D" type="String">
        <parameter value="60" type="Single" />
      </expected>
      <expected value="F" type="String">
        <parameter value="59.9" type="Single" />
      </expected>
      <expected value="F" type="String">
        <parameter value="50" type="Single" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="4">
    <description>Create a function that returns "'X' is a number." if X is a number and "'X' is not a number." otherwise</description>
    <code>
      Public Function Puzzle(ByVal X As String) As String
      End Function
    </code>
    <results>
      <expected value="39 is a number." type="String">
        <parameter value="39" type="String" />
      </expected>
      <expected value="$14.92 is a number." type="String">
        <parameter value="$14.92" type="String" />
      </expected>
      <expected value="foo42 is not a number." type="String">
        <parameter value="foo42" type="String" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="4">
    <description>Create a function that returns the length of a string</description>
    <code>
      Public Function Puzzle(ByVal X As String) As Integer
      End Function
    </code>
    <results>
      <expected value="16" type="Integer">
        <parameter value="Fat ed is not up" type="String" />
      </expected>
      <expected value="44" type="Integer">
        <parameter value="The rain in spain falls mainly on the plain." type="String" />
      </expected>
      <expected value="2" type="Integer">
        <parameter value="hi" type="String" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="4">
    <description>Create a function that compares two numeric strings and determines which is larger.  
    Ensure your code includes error handling.</description>
    <code>
      Public Function Puzzle(ByVal A As String, ByVal B as String) As String
      End Function
    </code>
    <results>
      <expected value="Value A is larger than B." type="String">
        <parameter value="39" type="String" />
        <parameter value="-3" type="String" />
      </expected>
      <expected value="Value B is larger than A." type="String">
        <parameter value="$14.92" type="String" />
        <parameter value="$99.54" type="String" />
      </expected>
      <expected value="A and B are the same." type="String">
        <parameter value="3.14159" type="String" />
        <parameter value="3.14159" type="String" />
      </expected>
      <expected value="A is not a number" type="String">
        <parameter value="foo" type="String" />
        <parameter value="2.71828" type="String" />
      </expected>
      <expected value="B is not a number" type="String">
        <parameter value="2.71828" type="String" />
        <parameter value="bar" type="String" />
      </expected>
    </results>
  </puzzle>


  <puzzle level="4">
    <description>Create a function that counts the occurences of a character in a string</description>
    <code>
      Public Function Puzzle(ByVal Phrase As String, ByVal Ch as Char) As Integer
      End Function
    </code>
    <results>
      <expected value="1" type="Integer">
        <parameter value="Fat Ed is not up" type="String" />
        <parameter value="d" type="Char" />
      </expected>
      <expected value="6" type="Integer">
        <parameter value="The rain in spain falls mainly on the plain" type="String" />
        <parameter value="n" type="Char" />
      </expected>
      <expected value="4" type="Integer">
        <parameter value="The quick brown fox jumped over the lazy dogs" type="String" />
        <parameter value="o" type="Char" />
      </expected>
    </results>
  </puzzle>

  <!--
   VB Chapter 5
   -->
  <puzzle level="5">
    <description>Create a function that sums the numbers from 1 to 'Limit' and returns the results.</description>
    <code>
      Public Function Puzzle(ByVal Limit As Integer) As Long
      End Function
    </code>
    <results>
      <expected value="55" type="Long">
        <parameter value="10" type="Integer" />
      </expected>
      <expected value="4950" type="Long">
        <parameter value="99" type="Integer" />
      </expected>
      <expected value="1577976" type="Long">
        <parameter value="1776" type="Integer" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="5">
    <description>Create a function that sums every odd number from 1 to 'Limit' and returns the results.</description>
    <code>
      Public Function Puzzle(ByVal Limit As Integer) As Long
      End Function
    </code>
    <results>
      <expected value="25" type="Long">
        <parameter value="10" type="Integer" />
      </expected>
      <expected value="2500" type="Long">
        <parameter value="99" type="Integer" />
      </expected>
      <expected value="788544" type="Long">
        <parameter value="1776" type="Integer" />
      </expected>
    </results>
  </puzzle>

  <puzzle level="5">
    <description>Create a function that converts the characters in the input phrase to their character code equivalent,
    concatentates all the codes together and returns the results.</description>
    <code>
      Public Function Puzzle(ByVal Phrase As String) As String
      End Function
    </code>
    <results>
      <expected value="97" type="String">
        <parameter value="a" type="String" />
      </expected>
      <expected value="973297" type="String">
        <parameter value="a a" type="String" />
      </expected>
      <expected value="8410410132829710511032105110328311297105110321029710810811546" type="String">
        <parameter value="The Rain in Spain falls." type="String" />
      </expected>
    </results>
  </puzzle>


  <puzzle level="5">
    <description>Create a function that sums the numbers from 1 to 'Limit', but stops once the sum is at least as large as 
    the sum and returns - read carefully - the last number used to compute the sum.</description>
    <code>
      Public Function Puzzle(ByVal Limit As Integer) As Integer
      End Function
    </code>
    <results>
      <expected value="2" type="Long">
        <parameter value="2" type="Integer" />
      </expected>
      <expected value="4" type="Long">
        <parameter value="10" type="Integer" />
      </expected>
      <expected value="14" type="Long">
        <parameter value="99" type="Integer" />
      </expected>
      <expected value="60" type="Long">
        <parameter value="1776" type="Integer" />
      </expected>
    </results>
  </puzzle>
  
  <puzzle level="6">
    <description>Set the font size of a label to 12.</description>
    <code>
      Public Function Puzzle() As Label
      End Function
    </code>
    <results>
      <expected property="Font.Size" value="12" />
    </results>
  </puzzle>

</GameML>
